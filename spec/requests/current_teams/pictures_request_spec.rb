# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/current_team/pictures", type: :request do
  let(:file_content_type) { "image/jpeg" }
  let(:file_path) { "spec/support/macbookair_stickered.jpg" }
  let(:file) { Rack::Test::UploadedFile.new(file_path, file_content_type) }
  let(:name) { "#{Faker::Address.community}, #{Faker::Address.city}" }
  let(:date) { Time.zone.today.iso8601 }
  let(:team) { FactoryBot.create(:team) }
  let(:user) { FactoryBot.create(:user) }
  let(:roles) { %i[owner manager editor] }
  let(:valid_attributes) { { file: file, date: Time.zone.today, name: name, team: team } }
  let(:invalid_attributes) { { file: nil, date: Time.zone.today, name: nil, team: team } }

  before do
    Member.create!(team: team, user: user, roles: Array(roles.sample))
    sign_in(user)
    switch_current_team(team)
  end

  describe "GET /index" do
    it "renders a successful response" do
      Picture.create! valid_attributes

      get current_team_pictures_url

      expect(response).to be_successful
      expect(response.body).to match(/#{name}/)
    end
  end

  describe "GET /show" do
    it "renders a successful response" do
      picture = Picture.create! valid_attributes

      get current_team_picture_url(picture.urlsafe_id)

      expect(response).to be_successful
    end
  end

  describe "GET /new" do
    it "renders a successful response" do
      get new_current_team_picture_url

      expect(response).to be_successful
    end
  end

  describe "GET /edit" do
    it "renders a successful response" do
      picture = Picture.create! valid_attributes

      get edit_current_team_picture_url(picture.urlsafe_id)

      expect(response).to be_successful
    end
  end

  describe "POST /create" do
    context "with valid parameters" do
      it "creates a new Picture and redirects to the created picture" do
        expect {
          post current_team_pictures_url, params: { picture: valid_attributes }
        }.to change { Picture.count }.by(1)

        expect(response).to redirect_to(current_team_picture_url(Picture.first))
      end

      it "creates a new Picture and records the event" do
        expect {
          post current_team_pictures_url, params: { picture: valid_attributes }
        }.to change { RecordEvent.count }.by(1)

        event = RecordEvent.first
        expect(event.name).to eq("created")
        expect(event.record_type).to eq("pic")
        expect(event.record_yid).to eq(Picture.first.yid)
        expect(event.team_yid).to eq(team.yid)
        expect(event.user_yid).to eq(user.yid)
      end
    end

    context "with invalid parameters" do
      it "does not create a new Picture" do
        expect {
          post current_team_pictures_url, params: { picture: invalid_attributes }
        }.to change { Picture.count }.by(0)
      end

      it "renders a response with 422 status (i.e. to display the 'new' template)" do
        post current_team_pictures_url, params: { picture: invalid_attributes }
        expect(response).to have_http_status(:unprocessable_content)
      end
    end
  end

  describe "PATCH /update" do
    let(:picture) { Picture.create! valid_attributes }

    context "with valid parameters" do
      let(:new_attributes) { { name: "New Name" } }

      it "updates the requested picture and redirects to the picture" do
        patch current_team_picture_url(picture.urlsafe_id), params: { picture: new_attributes }

        picture.reload

        expect(picture.name).to eq("New Name")
        expect(response).to redirect_to(current_team_picture_url(picture.urlsafe_id))
      end
    end

    context "with invalid parameters" do
      it "renders a response with 422 status (i.e. to display the 'edit' template)" do
        patch current_team_picture_url(picture.urlsafe_id), params: { picture: invalid_attributes }

        expect(response).to have_http_status(:unprocessable_content)
      end
    end
  end

  describe "DELETE /destroy" do
    let(:picture) { Picture.create! valid_attributes }
    let(:roles) { %i[owner manager] }

    it "destroys the requested picture and redirects to the pictures list" do
      picture # to create it
      expect(Picture.count).to eq(1)

      delete current_team_picture_url(picture.urlsafe_id)

      expect(Picture.count).to eq(0)
      expect(response).to redirect_to(current_team_pictures_url)
    end

    it "deletes a Picture and records the event" do
      picture # to create it
      expect(Picture.count).to eq(1)

      delete current_team_picture_url(picture.urlsafe_id)

      expect(RecordEvent.count).to eq(1)

      event = RecordEvent.first
      expect(event.name).to eq("deleted")
      expect(event.record_type).to eq("pic")
      expect(event.record_yid).to eq(picture.yid)
      expect(event.team_yid).to eq(team.yid)
      expect(event.user_yid).to eq(user.yid)
    end
  end
end
