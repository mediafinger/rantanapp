# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/current_team/members", type: :request do
  let(:user) { FactoryBot.create(:user) }
  let(:team) { FactoryBot.create(:team) }
  let(:roles) { %w[owner] }

  let(:valid_create_attributes) { { user_yid: user.yid, team_yid: team.yid, roles: roles } }
  let(:invalid_create_attributes) { { user_yid: user.yid, team_yid: team.yid, roles: ["Hausmeister"] } }

  describe "GET /index" do
    let!(:member) { Member.create! valid_create_attributes }

    context "when no current_team has been selected" do
      before do
        sign_in(user)
      end

      it "forbids access and redirects to home path" do
        get current_team_members_url
        expect(response).to redirect_to(root_url)
      end
    end

    context "when the same current_team has been selected already" do
      before do
        sign_in(user)
        switch_current_team(team)
      end

      it "renders a successful response" do
        get current_team_members_url
        expect(response).to be_successful
      end
    end
  end

  describe "GET /show" do
    let!(:member) { Member.create! valid_create_attributes }

    before do
      sign_in(user)
      switch_current_team(team)
    end

    it "renders a successful response" do
      get current_team_member_url(member.urlsafe_id)
      expect(response).to be_successful
    end
  end

  describe "GET /new" do
    let!(:member) { FactoryBot.create(:member, team: team, user: user, roles: %w[owner]) }

    before do
      sign_in(user)
      switch_current_team(team)
    end

    it "renders a successful response" do
      get new_current_team_member_url
      expect(response).to be_successful
    end
  end

  describe "GET /edit" do
    let!(:member) { Member.create! valid_create_attributes }

    before do
      sign_in(user)
      switch_current_team(team)
    end

    it "renders a successful response" do
      get edit_current_team_member_url(member.urlsafe_id)
      expect(response).to be_successful
    end
  end

  describe "POST /create" do
    let!(:member) { FactoryBot.create(:member, team: team, user: user, roles: %w[owner]) }

    let(:other_user) { FactoryBot.create(:user) }
    let(:valid_create_attributes) { { user_yid: other_user.yid, team_yid: team.yid, roles: roles } }

    before do
      sign_in(user)
      switch_current_team(team)
    end

    context "with valid parameters" do
      it "creates a new Member" do
        expect {
          post current_team_members_url, params: { member: valid_create_attributes }
        }.to change { Member.count }.by(1)
      end

      it "redirects to the created member" do
        post current_team_members_url, params: { member: valid_create_attributes }

        expect(response).to redirect_to(current_team_member_url(Member.first.urlsafe_id))
      end
    end

    context "with invalid parameters" do
      it "does not create a new Member" do
        expect {
          post current_team_members_url, params: { member: invalid_create_attributes }
        }.to change { Member.count }.by(0)
      end

      it "renders a response with 422 status (i.e. to display the 'new' template)" do
        post current_team_members_url, params: { member: invalid_create_attributes }
        expect(response).to have_http_status(:unprocessable_content)
      end
    end
  end

  describe "PATCH /update" do
    let!(:member) { FactoryBot.create(:member, team: team, user: user, roles: %w[owner]) }
    let!(:other_member) { FactoryBot.create(:member, team: team, user: other_user, roles: %w[editor]) }

    let(:other_user) { FactoryBot.create(:user) }
    let(:new_attributes) { { roles: %w[manager editor] } }

    before do
      sign_in(user)
      switch_current_team(team)
    end

    context "with valid parameters" do
      it "updates the requested member" do
        patch current_team_member_url(other_member.urlsafe_id), params: { member: new_attributes }

        other_member.reload

        expect(other_member.roles).to match_array(%w[manager editor])
      end

      it "redirects to the member" do
        patch current_team_member_url(other_member.urlsafe_id), params: { member: new_attributes }

        other_member.reload

        expect(response).to redirect_to(current_team_member_url(other_member.urlsafe_id))
      end
    end

    context "with invalid parameters" do
      it "renders a response with 422 status (i.e. to display the 'edit' template)" do
        patch current_team_member_url(member.urlsafe_id), params: { member: invalid_create_attributes }
        expect(response).to have_http_status(:unprocessable_content)
      end
    end
  end

  describe "DELETE /destroy" do
    let!(:member) { Member.create! valid_create_attributes }

    before do
      sign_in(user)
      switch_current_team(team)
    end

    it "destroys the requested member" do
      expect {
        delete current_team_member_url(member.urlsafe_id)
      }.to change { Member.count }.by(-1)
    end

    it "redirects to the members list" do
      delete current_team_member_url(member.urlsafe_id)
      expect(response).to redirect_to(current_team_members_url)
    end
  end
end
