# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/current_team/locations", type: :request do
  let(:team) { FactoryBot.create(:team) }
  let(:user) { FactoryBot.create(:user) }
  let(:roles) { %i[owner manager editor] }

  let(:valid_attributes) { { name: "Camping spot near the beach", country_code: "de", url: "www.yournaling.com", team: } }
  let(:invalid_attributes) { { name: nil } }

  before do
    Member.create!(team: team, user: user, roles: Array(roles.sample))
    sign_in(user)
    switch_current_team(team)
  end

  describe "GET /index" do
    it "renders a successful response" do
      Location.create! valid_attributes

      get current_team_locations_url

      expect(response).to be_successful
    end
  end

  describe "GET /show" do
    it "renders a successful response" do
      location = Location.create! valid_attributes

      get current_team_location_url(location)

      expect(response).to be_successful
    end
  end

  describe "GET /new" do
    it "renders a successful response" do
      get new_current_team_location_url

      expect(response).to be_successful
    end
  end

  describe "GET /edit" do
    it "renders a successful response" do
      location = Location.create! valid_attributes

      get edit_current_team_location_url(location)

      expect(response).to be_successful
    end
  end

  describe "POST /create" do
    context "with valid parameters" do
      it "creates a new Location" do
        expect {
          post current_team_locations_url, params: { location: valid_attributes }
        }.to change { Location.count }.by(1)
      end

      it "redirects to the created location" do
        post current_team_locations_url, params: { location: valid_attributes }
        expect(response).to redirect_to(current_team_location_url(Location.first))
      end
    end

    context "with invalid parameters" do
      it "does not create a new Location" do
        expect {
          post current_team_locations_url, params: { location: invalid_attributes }
        }.to change { Location.count }.by(0)
      end

      it "renders a response with 422 status (i.e. to display the 'new' template)" do
        post current_team_locations_url, params: { location: invalid_attributes }
        expect(response).to have_http_status(:unprocessable_entity)
      end
    end
  end

  describe "PATCH /update" do
    context "with valid parameters" do
      let(:new_attributes) { { url: "www.rantanvan.com" } }

      it "updates the requested location" do
        location = Location.create! valid_attributes

        patch current_team_location_url(location), params: { location: new_attributes }

        location.reload
        expect(location.url).to eq("https://www.rantanvan.com")
      end

      it "redirects to the location" do
        location = Location.create! valid_attributes

        patch current_team_location_url(location), params: { location: new_attributes }

        location.reload
        expect(response).to redirect_to(current_team_location_url(location))
      end
    end

    context "with invalid parameters" do
      it "renders a response with 422 status (i.e. to display the 'edit' template)" do
        location = Location.create! valid_attributes
        patch current_team_location_url(location), params: { location: invalid_attributes }
        expect(response).to have_http_status(:unprocessable_entity)
      end
    end
  end

  describe "DELETE /destroy" do
    let(:roles) { %i[owner manager] }

    let!(:location) { Location.create! valid_attributes }

    it "destroys the requested location" do
      expect {
        delete current_team_location_url(location)
      }.to change { Location.count }.by(-1)
    end

    it "redirects to the locations list" do
      delete current_team_location_url(location)

      expect(response).to redirect_to(current_team_locations_url)
    end
  end
end
